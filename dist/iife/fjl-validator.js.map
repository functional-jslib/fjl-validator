{"version":3,"file":"fjl-validator.js","sources":["../../src/validationOptions.js","../../src/regexValidator.js","../../src/alnumValidator.js","../../src/digitValidator.js","../../src/notEmptyValidator.js","../../src/stringLengthValidator.js","../../src/generated/version.js"],"sourcesContent":["/**\r\n * Created by Ely on 7/21/2014.\r\n * Initial idea borrowed from Zend Framework 2's Zend/Validator\r\n */\r\nimport {assignDeep, assign, isset,\r\n    call, isFunction, isString, apply, repeat, curry} from 'fjl';\r\n\r\nimport {defineEnumProps$} from 'fjl-mutable';\r\n\r\nexport const\r\n\r\n    defaultValueObscurator = x => repeat((x + '').length, '*'),\r\n\r\n    getErrorMsgByKey = curry((options, key, value) => {\r\n        let message;\r\n        const {messageTemplates, valueObscured, valueObscurator} = options,\r\n            _value = valueObscured ? valueObscurator(value) : value;\r\n        if (isFunction(key)) {\r\n            message = call(key, options, _value);\r\n        }\r\n        else if (!isString(key) || !messageTemplates[key]) {\r\n            return;\r\n        }\r\n        else if (isFunction(messageTemplates[key])) {\r\n            message = call(messageTemplates[key], options, _value);\r\n        }\r\n        else {\r\n            message = messageTemplates[key];\r\n        }\r\n        return message;\r\n    }),\r\n\r\n    validationOptions = (...options) => {\r\n        const _options = defineEnumProps$([\r\n            [Number, 'messagesMaxLength', 100],\r\n            [Object, 'messageTemplates', {}],\r\n            [Boolean, 'valueObscured', false],\r\n            [Function, 'valueObscurator', defaultValueObscurator]\r\n        ], {});\r\n        return options.length ?\r\n            apply(assignDeep, [_options].concat(options.filter(isset))) :\r\n            _options;\r\n    },\r\n\r\n    validationResult = options => {\r\n        const _options = defineEnumProps$([\r\n            [Boolean, 'result'],\r\n            [Array, 'messages']\r\n        ], {});\r\n        _options.value = undefined;\r\n        return options ? assign(_options, options) : _options;\r\n    }\r\n;\r\n\r\nexport default validationResult;\r\n","/**\r\n * Created by Ely on 7/21/2014.\r\n */\r\nimport {validationResult, validationOptions, getErrorMsgByKey}\r\n    from './validationOptions';\r\nimport {defineEnumProp$} from 'fjl-mutable';\r\nimport {curry, assignDeep} from 'fjl';\r\n\r\nexport const\r\n\r\n    regexValidatorOptions = options => {\r\n        const [_options] = defineEnumProp$(RegExp, {}, 'pattern', /./);\r\n        _options.messageTemplates = {\r\n            DOES_NOT_MATCH_PATTERN: (value, ops) =>\r\n                'The value passed in does not match pattern\"'\r\n                + ops.pattern + '\".  Value passed in: \"'\r\n                + ops.value + '\".'\r\n        };\r\n        return validationOptions(\r\n            options ? assignDeep(_options, options) : _options\r\n        );\r\n    },\r\n\r\n    regexValidator = curry((options, value) => {\r\n        const ops = regexValidatorOptions(options),\r\n            result = ops.pattern.test(value),\r\n\r\n            // If test failed\r\n            messages = !result ?\r\n                [getErrorMsgByKey(options, 'DOES_NOT_MATCH_PATTERN', value)] :\r\n                [];\r\n\r\n        return validationResult({ result, messages, value });\r\n    });\r\n\r\nexport default regexValidator;\r\n","/**\r\n * Created by Ely on 1/21/2015.\r\n */\r\nimport {regexValidator} from './regexValidator';\r\nimport {curry, assignDeep} from 'fjl';\r\n\r\nexport const alnumValidator = curry((options, value) => regexValidator(assignDeep({\r\n        pattern: /^[\\da-z]+$/i,\r\n        messageTemplates: {\r\n            DOES_NOT_MATCH_PATTERN: x =>\r\n                `Value is not alpha-numeric.  Value received: '${x}'.`\r\n        }\r\n    }, options), value));\r\n\r\nexport default alnumValidator;\r\n","/**\r\n * Created by Ely on 1/21/2015.\r\n */\r\nimport {regexValidator} from './regexValidator';\r\nimport {curry, assignDeep} from 'fjl';\r\n\r\nexport const digitValidator = curry((options, value) => regexValidator(assignDeep({\r\n        pattern: /^\\d+$/,\r\n        messageTemplates: {\r\n            DOES_NOT_MATCH_PATTERN: x =>\r\n                `The value passed in contains non digital characters.  ` +\r\n                `Value received: \"${x}\".`\r\n        }\r\n    }, options), value));\r\n\r\nexport default digitValidator;\r\n","/**\r\n * Created by Ely on 7/21/2014.\r\n */\r\nimport {validationResult, validationOptions, getErrorMsgByKey} from './validationOptions';\r\nimport {isEmpty, curry} from 'fjl';\r\n\r\nexport const\r\n\r\n    notEmptyOptions = options =>\r\n        validationOptions({\r\n            messageTemplates: {\r\n                EMPTY_NOT_ALLOWED: () =>\r\n                    'Empty values are not allowed.'\r\n            }\r\n        }, options),\r\n\r\n    notEmptyValidator = curry((options, value) => {\r\n        const ops = notEmptyOptions(options),\r\n            result = !isEmpty(value),\r\n            // If test failed\r\n            messages = !result ? [getErrorMsgByKey(\r\n                ops, 'EMPTY_NOT_ALLOWED', value\r\n            )] : [];\r\n        return validationResult({result, messages, value});\r\n    });\r\n\r\nexport default notEmptyValidator;\r\n","/**\r\n * Created by Ely on 1/21/2015.\r\n */\r\nimport {validationResult, getErrorMsgByKey, validationOptions} from './validationOptions';\r\nimport {typeOf, isString, assignDeep, curry} from 'fjl';\r\nimport {defineEnumProps$} from 'fjl-mutable';\r\n\r\nexport const\r\n\r\n    stringLengthOptions = options => {\r\n        const _options = defineEnumProps$([\r\n            [Number, 'min', 0],\r\n            [Number, 'max', Number.MAX_SAFE_INTEGER]\r\n        ], {});\r\n\r\n        _options.messageTemplates = {\r\n            NOT_OF_TYPE: (value) => `Value is not a String.  ` +\r\n                `Value type received: ${typeOf(value)}.` +\r\n                `Value received: \"${value}\".`,\r\n            NOT_WITHIN_RANGE: (value, ops) => `Value is not within range ` +\r\n                `${ops.min} to ${ops.max}.` +\r\n                `Value length given: \"` + value.length + `\".` +\r\n                `Value received: \"` + value + `\".`\r\n        };\r\n\r\n        return validationOptions(options ? assignDeep(_options, options) : _options);\r\n    },\r\n\r\n    stringLengthValidator = curry((options, value) => {\r\n        const ops = stringLengthOptions(options),\r\n            messages = [],\r\n            isOfType = isString(value),\r\n            valLength = isOfType ? value.length : 0,\r\n            isWithinRange = valLength >= ops.min && valLength <= ops.max;\r\n        if (!isOfType) {\r\n            messages.push(getErrorMsgByKey('NOT_OF_TYPE', value, ops));\r\n        }\r\n        else if (!isWithinRange) {\r\n            messages.push(getErrorMsgByKey('NOT_WITHIN_RANGE', value, ops));\r\n        }\r\n        return validationResult({\r\n            result: isOfType && isWithinRange,\r\n            messages,\r\n            value\r\n        });\r\n    });\r\n\r\nexport default stringLengthValidator;\r\n","/**\n * Content generated by '{project-root}/build-scripts/VersionNumberReadStream.js'.\n * Generated Wed Dec 13 2017 12:30:34 GMT-0500 (Eastern Standard Time) \n */\n \nexport const version = '1.0.0';\n\nexport default version;\n\n"],"names":["defaultValueObscurator","repeat","x","length","getErrorMsgByKey","curry","options","key","value","message","messageTemplates","valueObscured","valueObscurator","_value","isFunction","call","isString","validationOptions","_options","defineEnumProps$","Number","Object","Boolean","Function","apply","assignDeep","concat","filter","isset","validationResult","Array","undefined","assign","regexValidatorOptions","defineEnumProp$","RegExp","ops","pattern","regexValidator","result","test","messages","alnumValidator","digitValidator","notEmptyOptions","notEmptyValidator","isEmpty","stringLengthOptions","MAX_SAFE_INTEGER","typeOf","min","max","stringLengthValidator","isOfType","valLength","isWithinRange","push","version"],"mappings":"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"}