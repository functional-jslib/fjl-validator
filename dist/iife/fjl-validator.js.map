{"version":3,"file":"fjl-validator.js","sources":["../../src/ValidationUtils.js","../../src/regexValidator.js","../../src/alnumValidator.js","../../src/digitValidator.js","../../src/notEmptyValidator.js","../../src/stringLengthValidator.js","../../src/generated/version.js","../../src/fjlValidator.js"],"sourcesContent":["/**\r\n * Created by Ely on 7/21/2014.\r\n * Initial idea borrowed from Zend Framework 2's Zend/Validator\r\n * @module ValidatorOptions\r\n */\r\nimport {assignDeep, assign, isset,\r\n    call, isFunction, isString, apply, repeat, curry} from 'fjl';\r\n\r\nimport {defineEnumProps$} from 'fjl-mutable';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Default value obscurator.\r\n     * @function module:ValidatorOptions.defaultValueObscurator\r\n     * @param x {*} - Value to obscurate.\r\n     * @returns {String} - Obscurated value.\r\n     */\r\n    defaultValueObscurator = x => repeat((x + '').length, '*'),\r\n\r\n    /**\r\n     * Gets an error message by `messageTemplates` key from `options` object.\r\n     * @function module:ValidatorOptions.getErrorMsgByKey\r\n     * @param options {Object}\r\n     * @param key {(String|Function)}\r\n     * @param value {*}\r\n     * @returns {String|undefined} - Error message if successfully resolved one else `undefined`.\r\n     * @curried\r\n     */\r\n    getErrorMsgByKey = curry((options, key, value) => {\r\n        let message;\r\n        const {messageTemplates, valueObscured, valueObscurator} = options,\r\n            _value = valueObscured ? valueObscurator(value) : value;\r\n        if (isFunction(key)) {\r\n            message = call(key, _value, options);\r\n        }\r\n        else if (!isString(key) || !messageTemplates || !messageTemplates[key]) {\r\n            return;\r\n        }\r\n        else if (isFunction(messageTemplates[key])) {\r\n            message = call(messageTemplates[key], _value, options);\r\n        }\r\n        else {\r\n            message = messageTemplates[key];\r\n        }\r\n        return message;\r\n    }),\r\n\r\n    /**\r\n     * Returns a strongly typed/normalized ValidatorOptions object.\r\n     * @function module:ValidatorOptions.toValidationOptions\r\n     * @param options {...Object}\r\n     * @returns {Object}\r\n     */\r\n    toValidationOptions = (...options) => {\r\n        const _options = defineEnumProps$([\r\n            [Object, 'messageTemplates', {}],\r\n            [Boolean, 'valueObscured', false],\r\n            [Function, 'valueObscurator', defaultValueObscurator]\r\n        ], {});\r\n        return options.length ?\r\n            apply(assignDeep, [_options].concat(options.filter(isset))) :\r\n            _options;\r\n    },\r\n\r\n    /**\r\n     * Returns a strongly typed, normalized validation result object.\r\n     * @function module:ValidatorOptions.toValidationResult\r\n     * @param options {Object}\r\n     * @returns {*}\r\n     */\r\n    toValidationResult = options => {\r\n        const _options = defineEnumProps$([\r\n            [Boolean, 'result', false],\r\n            [Array, 'messages', []]\r\n        ], {});\r\n        _options.value = undefined;\r\n        return options ? assign(_options, options) : _options;\r\n    }\r\n;\r\n\r\nexport default toValidationResult;\r\n","/**\r\n * Created by Ely on 7/21/2014.\r\n * @module regexValidator\r\n */\r\nimport {toValidationResult, toValidationOptions, getErrorMsgByKey}\r\n    from './ValidationUtils';\r\nimport {defineEnumProp$} from 'fjl-mutable';\r\nimport {curry, assignDeep} from 'fjl';\r\n\r\nexport const\r\n\r\n    /**\r\n     * @function module:regexValidator.regexValidatorOptions\r\n     * @param options {Object}\r\n     * @returns {Object}\r\n     */\r\n    regexValidatorOptions = options => {\r\n        const [_options] = defineEnumProp$(RegExp, {}, 'pattern', /./);\r\n        _options.messageTemplates = {\r\n            DOES_NOT_MATCH_PATTERN: (value, ops) =>\r\n                'The value passed in does not match pattern\"'\r\n                + ops.pattern + '\".  Value passed in: \"'\r\n                + value + '\".'\r\n        };\r\n        return toValidationOptions(\r\n            options ? assignDeep(_options, options) : _options\r\n        );\r\n    },\r\n\r\n    /**\r\n     * @function module:regexValidator.regexValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    regexValidator = curry((options, value) => {\r\n        const ops = regexValidatorOptions(options),\r\n            result = ops.pattern.test(value),\r\n\r\n            // If test failed\r\n            messages = !result ?\r\n                [getErrorMsgByKey(ops, 'DOES_NOT_MATCH_PATTERN', value)] :\r\n                [];\r\n\r\n        return toValidationResult({ result, messages, value });\r\n    });\r\n\r\nexport default regexValidator;\r\n","/**\r\n * Created by Ely on 1/21/2015.\r\n * @module alnumValidator\r\n */\r\nimport {regexValidator} from './regexValidator';\r\nimport {curry, assignDeep} from 'fjl';\r\n\r\n/**\r\n * @function module:alnumValidator.alnumValidator\r\n * @param options {Object}\r\n * @param value {*}\r\n * @returns {Object}\r\n */\r\nexport const alnumValidator = curry((options, value) => regexValidator(assignDeep({\r\n        pattern: /^[\\da-z]+$/i,\r\n        messageTemplates: {\r\n            DOES_NOT_MATCH_PATTERN: x =>\r\n                `Value is not alpha-numeric.  Value received: '${x}'.`\r\n        }\r\n    }, options), value));\r\n\r\nexport default alnumValidator;\r\n","/**\r\n * Created by Ely on 1/21/2015.\r\n * @module digitValidator\r\n */\r\nimport {regexValidator} from './regexValidator';\r\nimport {curry, assignDeep} from 'fjl';\r\n\r\n/**\r\n * @function module:digitValidator.digitValidator\r\n * @param options {Object}\r\n * @param value {*}\r\n * @returns {Object}\r\n */\r\nexport const digitValidator = curry((options, value) => regexValidator(assignDeep({\r\n        pattern: /^\\d+$/,\r\n        messageTemplates: {\r\n            DOES_NOT_MATCH_PATTERN: x =>\r\n                `The value passed in contains non digital characters.  ` +\r\n                `Value received: \"${x}\".`\r\n        }\r\n    }, options), value));\r\n\r\nexport default digitValidator;\r\n","/**\r\n * Created by Ely on 7/21/2014.\r\n * @module notEmptyValidator\r\n */\r\nimport {toValidationResult, toValidationOptions, getErrorMsgByKey} from './ValidationUtils';\r\nimport {isEmpty, curry} from 'fjl';\r\n\r\nexport const\r\n\r\n    /**\r\n     * @function module:notEmptyValidator.notEmptyOptions\r\n     * @param options {Object}\r\n     * @returns {Object}\r\n     */\r\n    notEmptyOptions = options =>\r\n        toValidationOptions({\r\n            messageTemplates: {\r\n                EMPTY_NOT_ALLOWED: () =>\r\n                    'Empty values are not allowed.'\r\n            }\r\n        }, options),\r\n\r\n    /**\r\n     * @function module:notEmptyValidator.notEmptyValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    notEmptyValidator = curry((options, value) => {\r\n        const ops = notEmptyOptions(options),\r\n            result = !isEmpty(value),\r\n            // If test failed\r\n            messages = !result ? [getErrorMsgByKey(\r\n                ops, 'EMPTY_NOT_ALLOWED', value\r\n            )] : [];\r\n        return toValidationResult({result, messages, value});\r\n    });\r\n\r\nexport default notEmptyValidator;\r\n","/**\r\n * Created by Ely on 1/21/2015.\r\n * @module stringLengthValidator\r\n */\r\nimport {toValidationResult, getErrorMsgByKey, toValidationOptions} from './ValidationUtils';\r\nimport {typeOf, isString, assignDeep, curry} from 'fjl';\r\nimport {defineEnumProps$} from 'fjl-mutable';\r\n\r\nexport const\r\n\r\n    /**\r\n     * @function module:stringLengthValidator.stringLengthOptions\r\n     * @param options {Object}\r\n     * @returns {Object}\r\n     */\r\n    stringLengthOptions = options => {\r\n        const _options = defineEnumProps$([\r\n            [Number, 'min', 0],\r\n            [Number, 'max', Number.MAX_SAFE_INTEGER]\r\n        ], {});\r\n\r\n        _options.messageTemplates = {\r\n            NOT_OF_TYPE: (value) => `Value is not a String.  ` +\r\n                `Value type received: ${typeOf(value)}.  ` +\r\n                `Value received: \"${value}\".`,\r\n                NOT_WITHIN_RANGE: (value, ops) => `Value is not within range ` +\r\n                    `${ops.min} to ${ops.max}.  ` +\r\n                    `Value length given: \"` + value.length + `\".  ` +\r\n                    `Value received: \"` + value + `\".`\r\n        };\r\n\r\n        return toValidationOptions(options ? assignDeep(_options, options) : _options);\r\n    },\r\n\r\n    /**\r\n     * @function module:stringLengthValidator.stringLengthValidator\r\n     * @param options {Object}\r\n     * @value {*}\r\n     * @returns {Object}\r\n     */\r\n    stringLengthValidator = curry((options, value) => {\r\n        const ops = stringLengthOptions(options),\r\n            messages = [],\r\n            isOfType = isString(value),\r\n            valLength = isOfType ? value.length : 0,\r\n            isWithinRange = valLength >= ops.min && valLength <= ops.max;\r\n        if (!isOfType) {\r\n            messages.push(getErrorMsgByKey(ops, 'NOT_OF_TYPE', value));\r\n        }\r\n        else if (!isWithinRange) {\r\n            messages.push(getErrorMsgByKey(ops, 'NOT_WITHIN_RANGE', value));\r\n        }\r\n        return toValidationResult({\r\n            result: isOfType && isWithinRange,\r\n            messages,\r\n            value\r\n        });\r\n    });\r\n\r\nexport default stringLengthValidator;\r\n","/**\n * Content generated by '{project-root}/build-scripts/VersionNumberReadStream.js'.\n * Generated Thu Jan 11 2018 12:09:48 GMT-0500 (Eastern Standard Time) \n */\n \nexport const version = '0.6.5';\n\nexport default version;\n\n","/**\r\n * @module fjlValidator\r\n */\r\nexport * from './alnumValidator';\r\nexport * from './digitValidator';\r\nexport * from './notEmptyValidator';\r\nexport * from './regexValidator';\r\nexport * from './stringLengthValidator';\r\nexport * from './ValidationUtils';\r\nexport * from './generated/version';\r\n"],"names":["defaultValueObscurator","repeat","x","length","getErrorMsgByKey","curry","options","key","value","message","messageTemplates","valueObscured","valueObscurator","_value","isFunction","call","isString","toValidationOptions","_options","defineEnumProps$","Object","Boolean","Function","apply","assignDeep","concat","filter","isset","toValidationResult","Array","undefined","assign","regexValidatorOptions","defineEnumProp$","RegExp","ops","pattern","regexValidator","result","test","messages","alnumValidator","digitValidator","notEmptyOptions","notEmptyValidator","isEmpty","stringLengthOptions","Number","MAX_SAFE_INTEGER","typeOf","min","max","stringLengthValidator","isOfType","valLength","isWithinRange","push","version"],"mappings":"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"}