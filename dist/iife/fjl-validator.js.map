{"version":3,"file":"fjl-validator.js","sources":["../../src/ValidationUtils.js","../../src/regexValidator.js","../../src/alnumValidator.js","../../src/digitValidator.js","../../src/lengthValidator.js","../../src/notEmptyValidator.js","../../src/stringLengthValidator.js","../../src/fjlValidator.js"],"sourcesContent":["/**\r\n * Created by Ely on 7/21/2014.\r\n * Initial idea borrowed from Zend Framework 2's Zend/Validator\r\n * @module ValidationUtils\r\n */\r\nimport {assignDeep, call, isFunction, isString, repeat, curry, toTypeRefName, typeOf} from 'fjl';\r\n\r\nimport {defineEnumProps$} from 'fjl-mutable';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Default value obscurator.\r\n     * @function module:ValidationUtils.defaultValueObscurator\r\n     * @param x {*} - Value to obscurate.\r\n     * @returns {String} - Obscurated value.\r\n     */\r\n    defaultValueObscurator = x => repeat((x + '').length, '*'),\r\n\r\n    /**\r\n     * Gets an error message by `messageTemplates` key from `options` object.\r\n     * @function module:ValidationUtils.getErrorMsgByKey\r\n     * @param options {Object}\r\n     * @param key {(String|Function)}\r\n     * @param value {*}\r\n     * @returns {String|undefined} - Error message if successfully resolved one else `undefined`.\r\n     * @curried\r\n     */\r\n    getErrorMsgByKey = curry((options, key, value) => {\r\n        let message;\r\n        const {messageTemplates, valueObscured, valueObscurator} = options,\r\n            _value = valueObscured ? valueObscurator(value) : value;\r\n        if (isFunction(key)) {\r\n            message = call(key, _value, options);\r\n        }\r\n        else if (!isString(key) || !messageTemplates || !messageTemplates[key]) {\r\n            return;\r\n        }\r\n        else if (isFunction(messageTemplates[key])) {\r\n            message = call(messageTemplates[key], _value, options);\r\n        }\r\n        else {\r\n            message = messageTemplates[key];\r\n        }\r\n        return message;\r\n    }),\r\n\r\n    /**\r\n     * Returns a strongly typed/normalized ValidatorOptions object.\r\n     * @function module:ValidationUtils.toValidationOptions\r\n     * @param options {...Object}\r\n     * @returns {Object}\r\n     */\r\n    toValidationOptions = (...options) =>\r\n        assignDeep(defineEnumProps$([\r\n            [Object, 'messageTemplates', {}],\r\n            [Boolean, 'valueObscured', false],\r\n            [Function, 'valueObscurator', defaultValueObscurator]\r\n        ], {}), ...(options.length ? options : [{}])),\r\n\r\n    /**\r\n     * Returns a strongly typed, normalized validation result object.\r\n     * @function module:ValidationUtils.toValidationResult\r\n     * @param options {...Object}\r\n     * @returns {*}\r\n     */\r\n    toValidationResult = (...options) =>\r\n        assignDeep(defineEnumProps$([\r\n                [Boolean, 'result', false],\r\n                [Array, 'messages', []]\r\n            ], {}),\r\n            {value: undefined},\r\n            ...(options.length ? options : [{}])\r\n        ),\r\n\r\n    isOneOf = (x, ...types) => {\r\n        const typeName = typeOf(x);\r\n        return types\r\n            .map(toTypeRefName)\r\n            .some(name => typeName === name);\r\n    }\r\n\r\n;\r\n\r\nexport default toValidationResult;\r\n","/**\r\n * Created by Ely on 7/21/2014.\r\n * Module for validating a value by regular expression.\r\n * @module regexValidator\r\n */\r\nimport {toValidationResult, toValidationOptions, getErrorMsgByKey}\r\n    from './ValidationUtils';\r\nimport {defineEnumProp$} from 'fjl-mutable';\r\nimport {curry, assignDeep} from 'fjl';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Normalizes `regexValidator` options.\r\n     * @function module:regexValidator.toRegexValidatorOptions\r\n     * @param options {Object}\r\n     * @returns {Object}\r\n     */\r\n    toRegexValidatorOptions = options => {\r\n        const [_options] = defineEnumProp$(RegExp, toValidationOptions(), 'pattern', /./);\r\n        _options.messageTemplates = {\r\n            DOES_NOT_MATCH_PATTERN: (value, ops) =>\r\n                'The value passed in does not match pattern\"'\r\n                + ops.pattern + '\".  Value passed in: \"'\r\n                + value + '\".'\r\n        };\r\n        return options ? assignDeep(_options, options) : _options;\r\n    },\r\n\r\n    /**\r\n     * Same as `regexValidator` except this version is not curried and doesn't normalize incoming `options` parameter.\r\n     * @note Useful when the user has a need for calling `toRegexValidatorOptions`\r\n     *  externally/from-outside-the-`regexValidator` call (helps to remove that one extra call in this case (since\r\n     *  `regexValidator` calls `toRegexValidatorOptions` internally)).\r\n     * @function module:regexValidator.regexValidatorNoNormalize$\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {*}\r\n     */\r\n    regexValidatorNoNormalize$ = (options, value) => {\r\n        const result = options.pattern.test(value),\r\n\r\n            // If test failed\r\n            messages = !result ?\r\n                [getErrorMsgByKey(options, 'DOES_NOT_MATCH_PATTERN', value)] :\r\n                [];\r\n\r\n        return toValidationResult({ result, messages, value });\r\n    },\r\n\r\n    /**\r\n     * Un-curried version of `regexValidator`.\r\n     * @function module:regexValidator.regexValidator$\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    regexValidator$ = (options, value) => regexValidatorNoNormalize$(toRegexValidatorOptions(options), value),\r\n\r\n    /**\r\n     * Validates a value with the regex `pattern` option passed in.\r\n     * @curried\r\n     * @function module:regexValidator.regexValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    regexValidator = curry(regexValidator$)\r\n\r\n;\r\n\r\nexport default regexValidator;\r\n","/**\r\n * Created by Ely on 1/21/2015.\r\n * Module for validating alpha-numeric values.\r\n * @module alnumValidator\r\n */\r\nimport {regexValidator} from './regexValidator';\r\nimport {curry, assignDeep} from 'fjl';\r\n\r\n/**\r\n * @function module:alnumValidator.alnumValidator\r\n * @param options {Object}\r\n * @param value {*}\r\n * @returns {Object}\r\n */\r\nexport const\r\n\r\n    /**\r\n     * @function module:alnumValidator.alnumValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    alnumValidator = curry((options, value) =>\r\n        regexValidator(assignDeep({\r\n            pattern: /^[\\da-z]+$/i,\r\n            messageTemplates: {\r\n                DOES_NOT_MATCH_PATTERN: x =>\r\n                    `Value is not alpha-numeric.  Value received: '${x}'.`\r\n            }\r\n        }, options), value)\r\n    ),\r\n\r\n    /**\r\n     * Same as `alnumValidator` though doesn't-require-`options`/ignores parameter.\r\n     * @function module:alnumValidator.alnumValidator1\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    alnumValidator1 = value => alnumValidator(null, value)\r\n\r\n;\r\n\r\nexport default alnumValidator;\r\n","/**\r\n * Created by Ely on 1/21/2015.\r\n * Module for validating digits.\r\n * @module digitValidator\r\n */\r\nimport {regexValidator} from './regexValidator';\r\nimport {curry, assignDeep} from 'fjl';\r\n\r\nexport const\r\n\r\n    /**\r\n     * @function module:digitValidator.digitValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    digitValidator = curry((options, value) => regexValidator(assignDeep({\r\n        pattern: /^\\d+$/,\r\n        messageTemplates: {\r\n            DOES_NOT_MATCH_PATTERN: x =>\r\n                `The value passed in contains non digital characters.  ` +\r\n                `Value received: \"${x}\".`\r\n        }\r\n    }, options), value)),\r\n\r\n    /**\r\n     * Same as `digitValidator` though doesn't-require/ignores `options` parameter.\r\n     * @function module:digitValidator.digitValidator1\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    digitValidator1 = value => digitValidator(null, value);\r\n\r\nexport default digitValidator;\r\n","/**\r\n * Created by Ely on 1/21/2015.\r\n * @module lengthValidator\r\n */\r\nimport {toValidationResult, getErrorMsgByKey, toValidationOptions, isOneOf} from './ValidationUtils';\r\nimport {typeOf, assignDeep, curry} from 'fjl';\r\nimport {defineEnumProps$} from 'fjl-mutable';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Normalizes `lengthValidator` options.\r\n     * @function module:lengthValidator.toLengthOptions\r\n     * @param options {Object}\r\n     * @returns {Object}\r\n     */\r\n    toLengthOptions = options => {\r\n        const _options = defineEnumProps$([\r\n            [Number, 'min', 0],\r\n            [Number, 'max', Number.MAX_SAFE_INTEGER]\r\n        ], toValidationOptions());\r\n        _options.messageTemplates = {\r\n            NOT_OF_TYPE: value => `Value does not have a \\`length\\` property.  ` +\r\n                `Type received: \\`${typeOf(value)}\\`.  ` +\r\n                `Value received: \\`${value}\\`.`,\r\n            NOT_WITHIN_RANGE: (value, ops) => `Value's length is not within range ` +\r\n                `${ops.min} to ${ops.max}.  ` +\r\n                `Evaluated length is \\`${value.length}\\`.  ` +\r\n                `Value received: \\`${value}\\`.`\r\n        };\r\n        return options ? assignDeep(_options, options) : _options;\r\n    },\r\n\r\n    /**\r\n     * Validates whether given value has a length and whether length is between\r\n     *  given range (@see options for range props).\r\n     * @function module:lengthValidator.lengthValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    lengthValidator = curry((options, value) => {\r\n        const ops = toLengthOptions(options),\r\n            messages = []\r\n        ;\r\n        let valLength,\r\n            isWithinRange,\r\n            result = false\r\n        ;\r\n        if (isOneOf(value, 'Null', 'Undefined', 'NaN', 'Symbol') || !value.hasOwnProperty('length')) {\r\n            messages.push(getErrorMsgByKey(ops, 'NOT_OF_TYPE', value));\r\n            return toValidationResult({result, messages, value});\r\n        }\r\n        valLength = value.length;\r\n        isWithinRange = valLength >= ops.min && valLength <= ops.max;\r\n        if (!isWithinRange) {\r\n            messages.push(getErrorMsgByKey(ops, 'NOT_WITHIN_RANGE', value));\r\n        }\r\n        else {\r\n            result = true;\r\n        }\r\n        return toValidationResult({\r\n            result,\r\n            messages,\r\n            value\r\n        });\r\n    })\r\n;\r\n\r\nexport default lengthValidator;\r\n","/**\r\n * Created by Ely on 7/21/2014.\r\n * @module notEmptyValidator\r\n */\r\nimport {toValidationResult, toValidationOptions, getErrorMsgByKey} from './ValidationUtils';\r\nimport {isEmpty, curry} from 'fjl';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Normalizes incoming options so that they are valid `notEmptyValidator` options.\r\n     * @note currently `notEmptyValidator` only takes the `messageTemplates` option (may\r\n     *  have more options in the future).\r\n     * @function module:notEmptyValidator.toNotEmptyOptions\r\n     * @param options {Object}\r\n     * @returns {Object}\r\n     */\r\n    toNotEmptyOptions = options =>\r\n        toValidationOptions({\r\n            messageTemplates: {\r\n                EMPTY_NOT_ALLOWED: () =>\r\n                    'Empty values are not allowed.'\r\n            }\r\n        }, options),\r\n\r\n    /**\r\n     * Un-curried version of notEmptyValidator which doesn't normalize the passed in\r\n     * options parameter (since currently `notEmptyValidator` has no options other than it's `messageTemplates`\r\n     * field).  @see module:notEmptyValidator.notEmptyValidatorNoNormalize$ .\r\n     * Also this method is useful when the user, themselves, have to call `toNotEmptyOptions` for a specific reason.\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {*}\r\n     */\r\n    notEmptyValidatorNoNormalize$ = (options, value) => {\r\n        const result = isEmpty(value),\r\n            // If test failed\r\n            messages = result ? [getErrorMsgByKey(\r\n                options, 'EMPTY_NOT_ALLOWED', value\r\n            )] : [];\r\n        return toValidationResult({result: !result, messages, value});\r\n    },\r\n\r\n    /**\r\n     * Un-curried version of `notEmptyValidator`\r\n     * @function module:notEmptyValidator.notEmptyValidator$\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    notEmptyValidator$ = (options, value) =>\r\n        notEmptyValidatorNoNormalize$(toNotEmptyOptions(options), value),\r\n\r\n    /**\r\n     * Same as `notEmptyValidator` except doesn't require first parameter (\"options\" parameter).\r\n     * @function module:notEmptyValidator.notEmptyValidator1\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    notEmptyValidator1 = value => notEmptyValidatorNoNormalize$(null, value),\r\n\r\n    /**\r\n     * @function module:notEmptyValidator.notEmptyValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    notEmptyValidator = curry(notEmptyValidator$);\r\n\r\nexport default notEmptyValidator;\r\n","/**\r\n * Created by Ely on 1/21/2015.\r\n * @module stringLengthValidator\r\n */\r\nimport {toValidationResult, getErrorMsgByKey, toValidationOptions} from './ValidationUtils';\r\nimport {typeOf, isString, assignDeep, curry} from 'fjl';\r\nimport {defineEnumProps$} from 'fjl-mutable';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Normalizes (ensures has expected properties) `stringLengthValidator`'s options.\r\n     * @function module:stringLengthValidator.toStringLengthOptions\r\n     * @param options {Object}\r\n     * @returns {Object}\r\n     */\r\n    toStringLengthOptions = options => {\r\n        const _options = defineEnumProps$([\r\n            [Number, 'min', 0],\r\n            [Number, 'max', Number.MAX_SAFE_INTEGER]\r\n        ], toValidationOptions());\r\n\r\n        _options.messageTemplates = {\r\n            NOT_OF_TYPE: (value) => `Value is not a String.  ` +\r\n                `Value type received: ${typeOf(value)}.  ` +\r\n                `Value received: \"${value}\".`,\r\n            NOT_WITHIN_RANGE: (value, ops) => `Value is not within range ` +\r\n                `${ops.min} to ${ops.max}.  ` +\r\n                `Value length given: \"` + value.length + `\".  ` +\r\n                `Value received: \"` + value + `\".`\r\n        };\r\n\r\n        return options ? assignDeep(_options, options) : _options;\r\n    },\r\n\r\n    /**\r\n     * Same as `stringLengthValidator$` except doesn't normalize the incoming options.\r\n     * Useful for cases where you have to call `toStringLengthValidator` options from outside of the `stringLengthValidator` call (\r\n     *  helps eliminate one call in this case).  Also useful for extreme cases (cases where you have hundreds of validators\r\n     *  and want to pull out every ounce of performance from them possible).\r\n     * @function module:stringLengthValidator.stringLengthValidatorNoNormalize$\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    stringLengthValidatorNoNormalize$ = (options, value) => {\r\n        const messages = [],\r\n            isOfType = isString(value),\r\n            valLength = isOfType ? value.length : 0,\r\n            isWithinRange = valLength >= options.min && valLength <= options.max;\r\n        if (!isOfType) {\r\n            messages.push(getErrorMsgByKey(options, 'NOT_OF_TYPE', value));\r\n        }\r\n        else if (!isWithinRange) {\r\n            messages.push(getErrorMsgByKey(options, 'NOT_WITHIN_RANGE', value));\r\n        }\r\n        return toValidationResult({\r\n            result: isOfType && isWithinRange,\r\n            messages,\r\n            value\r\n        });\r\n    },\r\n\r\n    /**\r\n     * @function module:stringLengthValidator.stringLengthValidator$\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    stringLengthValidator$ = (options, value) =>\r\n        stringLengthValidatorNoNormalize$(toStringLengthOptions(options), value),\r\n\r\n    /**\r\n     * @function module:stringLengthValidator.stringLengthValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    stringLengthValidator = curry(stringLengthValidator$)\r\n\r\n;\r\n\r\nexport default stringLengthValidator;\r\n","/**\r\n * @module fjlValidator\r\n */\r\nexport * from './alnumValidator';\r\nexport * from './digitValidator';\r\nexport * from './lengthValidator';\r\nexport * from './notEmptyValidator';\r\nexport * from './regexValidator';\r\nexport * from './stringLengthValidator';\r\nexport * from './ValidationUtils';\r\n"],"names":["defaultValueObscurator","x","repeat","length","getErrorMsgByKey","curry","options","key","value","message","messageTemplates","valueObscured","valueObscurator","_value","isFunction","call","isString","toValidationOptions","assignDeep","defineEnumProps$","Object","Boolean","Function","toValidationResult","Array","undefined","isOneOf","typeName","typeOf","types","map","toTypeRefName","some","name","toRegexValidatorOptions","defineEnumProp$","RegExp","_options","DOES_NOT_MATCH_PATTERN","ops","pattern","regexValidatorNoNormalize$","result","test","messages","regexValidator$","regexValidator","alnumValidator","alnumValidator1","digitValidator","digitValidator1","toLengthOptions","Number","MAX_SAFE_INTEGER","NOT_OF_TYPE","NOT_WITHIN_RANGE","min","max","lengthValidator","valLength","isWithinRange","hasOwnProperty","push","toNotEmptyOptions","EMPTY_NOT_ALLOWED","notEmptyValidatorNoNormalize$","isEmpty","notEmptyValidator$","notEmptyValidator1","notEmptyValidator","toStringLengthOptions","stringLengthValidatorNoNormalize$","isOfType","stringLengthValidator$","stringLengthValidator"],"mappings":"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"}