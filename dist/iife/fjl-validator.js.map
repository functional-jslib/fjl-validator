{"version":3,"file":"fjl-validator.js","sources":["../../src/ValidationUtils.js","../../src/regexValidator.js","../../src/alnumValidator.js","../../src/digitValidator.js","../../src/notEmptyValidator.js","../../src/stringLengthValidator.js","../../src/generated/version.js","../../src/fjlValidator.js"],"sourcesContent":["/**\n * Created by Ely on 7/21/2014.\n * Initial idea borrowed from Zend Framework 2's Zend/Validator\n * @module ValidationUtils\n */\nimport {assignDeep, assign, isset,\n    call, isFunction, isString, apply, repeat, curry} from 'fjl';\n\nimport {defineEnumProps$} from 'fjl-mutable';\n\nexport const\n\n    /**\n     * Default value obscurator.\n     * @function module:ValidationUtils.defaultValueObscurator\n     * @param x {*} - Value to obscurate.\n     * @returns {String} - Obscurated value.\n     */\n    defaultValueObscurator = x => repeat((x + '').length, '*'),\n\n    /**\n     * Gets an error message by `messageTemplates` key from `options` object.\n     * @function module:ValidationUtils.getErrorMsgByKey\n     * @param options {Object}\n     * @param key {(String|Function)}\n     * @param value {*}\n     * @returns {String|undefined} - Error message if successfully resolved one else `undefined`.\n     * @curried\n     */\n    getErrorMsgByKey = curry((options, key, value) => {\n        let message;\n        const {messageTemplates, valueObscured, valueObscurator} = options,\n            _value = valueObscured ? valueObscurator(value) : value;\n        if (isFunction(key)) {\n            message = call(key, _value, options);\n        }\n        else if (!isString(key) || !messageTemplates || !messageTemplates[key]) {\n            return;\n        }\n        else if (isFunction(messageTemplates[key])) {\n            message = call(messageTemplates[key], _value, options);\n        }\n        else {\n            message = messageTemplates[key];\n        }\n        return message;\n    }),\n\n    /**\n     * Returns a strongly typed/normalized ValidatorOptions object.\n     * @function module:ValidationUtils.toValidationOptions\n     * @param options {...Object}\n     * @returns {Object}\n     */\n    toValidationOptions = (...options) =>\n        assignDeep(defineEnumProps$([\n            [Object, 'messageTemplates', {}],\n            [Boolean, 'valueObscured', false],\n            [Function, 'valueObscurator', defaultValueObscurator]\n        ], {}), ...(options.length ? options : [{}])),\n\n    /**\n     * Returns a strongly typed, normalized validation result object.\n     * @function module:ValidationUtils.toValidationResult\n     * @param options {...Object}\n     * @returns {*}\n     */\n    toValidationResult = (...options) =>\n        assignDeep(defineEnumProps$([\n                [Boolean, 'result', false],\n                [Array, 'messages', []]\n            ], {}),\n            {value: undefined},\n            ...(options.length ? options : [{}])\n        )\n\n;\n\nexport default toValidationResult;\n","/**\n * Created by Ely on 7/21/2014.\n * Module for validating a value by regular expression.\n * @module regexValidator\n */\nimport {toValidationResult, toValidationOptions, getErrorMsgByKey}\n    from './ValidationUtils';\nimport {defineEnumProp$} from 'fjl-mutable';\nimport {curry, assignDeep} from 'fjl';\n\nexport const\n\n    /**\n     * Normalizes `regexValidator` options.\n     * @function module:regexValidator.toRegexValidatorOptions\n     * @param options {Object}\n     * @returns {Object}\n     */\n    toRegexValidatorOptions = options => {\n        const [_options] = defineEnumProp$(RegExp, toValidationOptions(), 'pattern', /./);\n        _options.messageTemplates = {\n            DOES_NOT_MATCH_PATTERN: (value, ops) =>\n                'The value passed in does not match pattern\"'\n                + ops.pattern + '\".  Value passed in: \"'\n                + value + '\".'\n        };\n        return options ? assignDeep(_options, options) : _options;\n    },\n\n    /**\n     * Same as `regexValidator` except this version is not curried and doesn't normalize incoming `options` parameter.\n     * @note Useful when the user has a need for calling `toRegexValidatorOptions`\n     *  externally/from-outside-the-`regexValidator` call (helps to remove that one extra call in this case (since\n     *  `regexValidator` calls `toRegexValidatorOptions` internally)).\n     * @function module:regexValidator.regexValidatorNoNormalize$\n     * @param options {Object}\n     * @param value {*}\n     * @returns {*}\n     */\n    regexValidatorNoNormalize$ = (options, value) => {\n        const result = options.pattern.test(value),\n\n            // If test failed\n            messages = !result ?\n                [getErrorMsgByKey(options, 'DOES_NOT_MATCH_PATTERN', value)] :\n                [];\n\n        return toValidationResult({ result, messages, value });\n    },\n\n    /**\n     * Un-curried version of `regexValidator`.\n     * @function module:regexValidator.regexValidator$\n     * @param options {Object}\n     * @param value {*}\n     * @returns {Object}\n     */\n    regexValidator$ = (options, value) => regexValidatorNoNormalize$(toRegexValidatorOptions(options), value),\n\n    /**\n     * Validates a value with the regex `pattern` option passed in.\n     * @curried\n     * @function module:regexValidator.regexValidator\n     * @param options {Object}\n     * @param value {*}\n     * @returns {Object}\n     */\n    regexValidator = curry(regexValidator$)\n\n;\n\nexport default regexValidator;\n","/**\n * Created by Ely on 1/21/2015.\n * Module for validating alpha-numeric values.\n * @module alnumValidator\n */\nimport {regexValidator} from './regexValidator';\nimport {curry, assignDeep} from 'fjl';\n\n/**\n * @function module:alnumValidator.alnumValidator\n * @param options {Object}\n * @param value {*}\n * @returns {Object}\n */\nexport const\n\n    /**\n     * @function module:alnumValidator.alnumValidator\n     * @param options {Object}\n     * @param value {*}\n     * @returns {Object}\n     */\n    alnumValidator = curry((options, value) =>\n        regexValidator(assignDeep({\n            pattern: /^[\\da-z]+$/i,\n            messageTemplates: {\n                DOES_NOT_MATCH_PATTERN: x =>\n                    `Value is not alpha-numeric.  Value received: '${x}'.`\n            }\n        }, options), value)\n    ),\n\n    /**\n     * Same as `alnumValidator` though doesn't-require-`options`/ignores parameter.\n     * @function module:alnumValidator.alnumValidator1\n     * @param value {*}\n     * @returns {Object}\n     */\n    alnumValidator1 = value => alnumValidator(null, value)\n\n;\n\nexport default alnumValidator;\n","/**\n * Created by Ely on 1/21/2015.\n * Module for validating digits.\n * @module digitValidator\n */\nimport {regexValidator} from './regexValidator';\nimport {curry, assignDeep} from 'fjl';\n\nexport const\n\n    /**\n     * @function module:digitValidator.digitValidator\n     * @param options {Object}\n     * @param value {*}\n     * @returns {Object}\n     */\n    digitValidator = curry((options, value) => regexValidator(assignDeep({\n        pattern: /^\\d+$/,\n        messageTemplates: {\n            DOES_NOT_MATCH_PATTERN: x =>\n                `The value passed in contains non digital characters.  ` +\n                `Value received: \"${x}\".`\n        }\n    }, options), value)),\n\n    /**\n     * Same as `digitValidator` though doesn't-require/ignores `options` parameter.\n     * @function module:digitValidator.digitValidator1\n     * @param value {*}\n     * @returns {Object}\n     */\n    digitValidator1 = value => digitValidator(null, value);\n\nexport default digitValidator;\n","/**\n * Created by Ely on 7/21/2014.\n * @module notEmptyValidator\n */\nimport {toValidationResult, toValidationOptions, getErrorMsgByKey} from './ValidationUtils';\nimport {isEmpty, curry} from 'fjl';\n\nexport const\n\n    /**\n     * Normalizes incoming options so that they are valid `notEmptyValidator` options.\n     * @note currently `notEmptyValidator` only takes the `messageTemplates` option (may\n     *  have more options in the future).\n     * @function module:notEmptyValidator.toNotEmptyOptions\n     * @param options {Object}\n     * @returns {Object}\n     */\n    toNotEmptyOptions = options =>\n        toValidationOptions({\n            messageTemplates: {\n                EMPTY_NOT_ALLOWED: () =>\n                    'Empty values are not allowed.'\n            }\n        }, options),\n\n    /**\n     * Un-curried version of notEmptyValidator which doesn't normalize the passed in\n     * options parameter (since currently `notEmptyValidator` has no options other than it's `messageTemplates`\n     * field).  @see module:notEmptyValidator.notEmptyValidatorNoNormalize$ .\n     * Also this method is useful when the user, themselves, have to call `toNotEmptyOptions` for a specific reason.\n     * @param options {Object}\n     * @param value {*}\n     * @returns {*}\n     */\n    notEmptyValidatorNoNormalize$ = (options, value) => {\n        const result = !isEmpty(value),\n            // If test failed\n            messages = !result ? [getErrorMsgByKey(\n                options, 'EMPTY_NOT_ALLOWED', value\n            )] : [];\n        return toValidationResult({result, messages, value});\n    },\n\n    /**\n     * Un-curried version of `notEmptyValidator`\n     * @function module:notEmptyValidator.notEmptyValidator$\n     * @param options {Object}\n     * @param value {*}\n     * @returns {Object}\n     */\n    notEmptyValidator$ = (options, value) =>\n        notEmptyValidatorNoNormalize$(toNotEmptyOptions(options), value),\n\n    /**\n     * Same as `notEmptyValidator` except doesn't require first parameter (\"options\" parameter).\n     * @function module:notEmptyValidator.notEmptyValidator1\n     * @param value {*}\n     * @returns {Object}\n     */\n    notEmptyValidator1 = value => notEmptyValidatorNoNormalize$(null, value),\n\n    /**\n     * @function module:notEmptyValidator.notEmptyValidator\n     * @param options {Object}\n     * @param value {*}\n     * @returns {Object}\n     */\n    notEmptyValidator = curry(notEmptyValidator$);\n\nexport default notEmptyValidator;\n","/**\n * Created by Ely on 1/21/2015.\n * @module stringLengthValidator\n */\nimport {toValidationResult, getErrorMsgByKey, toValidationOptions} from './ValidationUtils';\nimport {typeOf, isString, assignDeep, curry} from 'fjl';\nimport {defineEnumProps$} from 'fjl-mutable';\n\nexport const\n\n    /**\n     * Normalizes (ensures has expected properties) `stringLengthValidator`'s options.\n     * @function module:stringLengthValidator.toStringLengthOptions\n     * @param options {Object}\n     * @returns {Object}\n     */\n    toStringLengthOptions = options => {\n        const _options = defineEnumProps$([\n            [Number, 'min', 0],\n            [Number, 'max', Number.MAX_SAFE_INTEGER]\n        ], toValidationOptions());\n\n        _options.messageTemplates = {\n            NOT_OF_TYPE: (value) => `Value is not a String.  ` +\n                `Value type received: ${typeOf(value)}.  ` +\n                `Value received: \"${value}\".`,\n            NOT_WITHIN_RANGE: (value, ops) => `Value is not within range ` +\n                `${ops.min} to ${ops.max}.  ` +\n                `Value length given: \"` + value.length + `\".  ` +\n                `Value received: \"` + value + `\".`\n        };\n\n        return options ? assignDeep(_options, options) : _options;\n    },\n\n    /**\n     * Same as `stringLengthValidator$` except doesn't normalize the incoming options.\n     * Useful for cases where you have to call `toStringLengthValidator` options from outside of the `stringLengthValidator` call (\n     *  helps eliminate one call in this case).  Also useful for extreme cases (cases where you have hundreds of validators\n     *  and want to pull out every ounce of performance from them possible).\n     * @function module:stringLengthValidator.stringLengthValidatorNoNormalize$\n     * @param options {Object}\n     * @param value {*}\n     * @returns {Object}\n     */\n    stringLengthValidatorNoNormalize$ = (options, value) => {\n        const messages = [],\n            isOfType = isString(value),\n            valLength = isOfType ? value.length : 0,\n            isWithinRange = valLength >= options.min && valLength <= options.max;\n        if (!isOfType) {\n            messages.push(getErrorMsgByKey(options, 'NOT_OF_TYPE', value));\n        }\n        else if (!isWithinRange) {\n            messages.push(getErrorMsgByKey(options, 'NOT_WITHIN_RANGE', value));\n        }\n        return toValidationResult({\n            result: isOfType && isWithinRange,\n            messages,\n            value\n        });\n    },\n\n    /**\n     * @function module:stringLengthValidator.stringLengthValidator$\n     * @param options {Object}\n     * @param value {*}\n     * @returns {Object}\n     */\n    stringLengthValidator$ = (options, value) =>\n        stringLengthValidatorNoNormalize$(toStringLengthOptions(options), value),\n\n    /**\n     * @function module:stringLengthValidator.stringLengthValidator\n     * @param options {Object}\n     * @param value {*}\n     * @returns {Object}\n     */\n    stringLengthValidator = curry(stringLengthValidator$)\n\n;\n\nexport default stringLengthValidator;\n","/**\n * Content generated by '{project-root}/build-scripts/VersionNumberReadStream.js'.\n * Generated Wed Apr 11 2018 10:53:42 GMT-0400 (EDT) \n */\n \nexport const version = '0.6.16';\n\nexport default version;\n\n","/**\n * @module fjlValidator\n */\nexport * from './alnumValidator';\nexport * from './digitValidator';\nexport * from './notEmptyValidator';\nexport * from './regexValidator';\nexport * from './stringLengthValidator';\nexport * from './ValidationUtils';\nexport * from './generated/version';\n"],"names":["defaultValueObscurator","repeat","x","length","getErrorMsgByKey","curry","options","key","value","message","messageTemplates","valueObscured","valueObscurator","_value","isFunction","call","isString","toValidationOptions","assignDeep","defineEnumProps$","Object","Boolean","Function","toValidationResult","Array","undefined","toRegexValidatorOptions","defineEnumProp$","RegExp","_options","ops","pattern","regexValidatorNoNormalize$","result","test","messages","regexValidator$","regexValidator","alnumValidator","alnumValidator1","digitValidator","digitValidator1","toNotEmptyOptions","notEmptyValidatorNoNormalize$","isEmpty","notEmptyValidator$","notEmptyValidator1","notEmptyValidator","toStringLengthOptions","Number","MAX_SAFE_INTEGER","typeOf","min","max","stringLengthValidatorNoNormalize$","isOfType","valLength","isWithinRange","push","stringLengthValidator$","stringLengthValidator","version"],"mappings":"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"}