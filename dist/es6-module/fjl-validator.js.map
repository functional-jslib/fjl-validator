{"version":3,"file":"fjl-validator.js","sources":["../../src/ValidationUtils.js","../../src/regexValidator.js","../../src/alnumValidator.js","../../src/digitValidator.js","../../src/lengthValidator.js","../../src/notEmptyValidator.js","../../src/stringLengthValidator.js","../../src/fjlValidator.js"],"sourcesContent":["/**\r\n * Created by Ely on 7/21/2014.\r\n * Initial idea borrowed from Zend Framework 2's Zend/Validator\r\n * @module ValidationUtils\r\n */\r\nimport {assignDeep, call, isFunction, isString, repeat, curry, toTypeRefName, typeOf} from 'fjl';\r\n\r\nimport {defineEnumProps$} from 'fjl-mutable';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Default value obscurator.\r\n     * @function module:ValidationUtils.defaultValueObscurator\r\n     * @param x {*} - Value to obscurate.\r\n     * @returns {String} - Obscurated value.\r\n     */\r\n    defaultValueObscurator = x => repeat((x + '').length, '*'),\r\n\r\n    /**\r\n     * Gets an error message by `messageTemplates` key from `options` object.\r\n     * @function module:ValidationUtils.getErrorMsgByKey\r\n     * @param options {Object}\r\n     * @param key {(String|Function)}\r\n     * @param value {*}\r\n     * @returns {String|undefined} - Error message if successfully resolved one else `undefined`.\r\n     * @curried\r\n     */\r\n    getErrorMsgByKey = curry((options, key, value) => {\r\n        let message;\r\n        const {messageTemplates, valueObscured, valueObscurator} = options,\r\n            _value = valueObscured ? valueObscurator(value) : value;\r\n        if (isFunction(key)) {\r\n            message = call(key, _value, options);\r\n        }\r\n        else if (!isString(key) || !messageTemplates || !messageTemplates[key]) {\r\n            return;\r\n        }\r\n        else if (isFunction(messageTemplates[key])) {\r\n            message = call(messageTemplates[key], _value, options);\r\n        }\r\n        else {\r\n            message = messageTemplates[key];\r\n        }\r\n        return message;\r\n    }),\r\n\r\n    /**\r\n     * Returns a strongly typed/normalized ValidatorOptions object.\r\n     * @function module:ValidationUtils.toValidationOptions\r\n     * @param options {...Object}\r\n     * @returns {Object}\r\n     */\r\n    toValidationOptions = (...options) =>\r\n        assignDeep(defineEnumProps$([\r\n            [Object, 'messageTemplates', {}],\r\n            [Boolean, 'valueObscured', false],\r\n            [Function, 'valueObscurator', defaultValueObscurator]\r\n        ], {}), ...(options.length ? options : [{}])),\r\n\r\n    /**\r\n     * Returns a strongly typed, normalized validation result object.\r\n     * @function module:ValidationUtils.toValidationResult\r\n     * @param options {...Object}\r\n     * @returns {*}\r\n     */\r\n    toValidationResult = (...options) =>\r\n        assignDeep(defineEnumProps$([\r\n                [Boolean, 'result', false],\r\n                [Array, 'messages', []]\r\n            ], {}),\r\n            {value: undefined},\r\n            ...(options.length ? options : [{}])\r\n        ),\r\n\r\n    isOneOf = (x, ...types) => {\r\n        const typeName = typeOf(x);\r\n        return types\r\n            .map(toTypeRefName)\r\n            .some(name => typeName === name);\r\n    }\r\n\r\n;\r\n\r\nexport default toValidationResult;\r\n","/**\r\n * Created by Ely on 7/21/2014.\r\n * Module for validating a value by regular expression.\r\n * @module regexValidator\r\n */\r\nimport {toValidationResult, toValidationOptions, getErrorMsgByKey}\r\n    from './ValidationUtils';\r\nimport {defineEnumProp$} from 'fjl-mutable';\r\nimport {curry, assignDeep} from 'fjl';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Normalizes `regexValidator` options.\r\n     * @function module:regexValidator.toRegexValidatorOptions\r\n     * @param options {Object}\r\n     * @returns {Object}\r\n     */\r\n    toRegexValidatorOptions = options => {\r\n        const [_options] = defineEnumProp$(RegExp, toValidationOptions(), 'pattern', /./);\r\n        _options.messageTemplates = {\r\n            DOES_NOT_MATCH_PATTERN: (value, ops) =>\r\n                'The value passed in does not match pattern\"'\r\n                + ops.pattern + '\".  Value passed in: \"'\r\n                + value + '\".'\r\n        };\r\n        return options ? assignDeep(_options, options) : _options;\r\n    },\r\n\r\n    /**\r\n     * Same as `regexValidator` except this version is not curried and doesn't normalize incoming `options` parameter.\r\n     * @note Useful when the user has a need for calling `toRegexValidatorOptions`\r\n     *  externally/from-outside-the-`regexValidator` call (helps to remove that one extra call in this case (since\r\n     *  `regexValidator` calls `toRegexValidatorOptions` internally)).\r\n     * @function module:regexValidator.regexValidatorNoNormalize$\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {*}\r\n     */\r\n    regexValidatorNoNormalize$ = (options, value) => {\r\n        const result = options.pattern.test(value),\r\n\r\n            // If test failed\r\n            messages = !result ?\r\n                [getErrorMsgByKey(options, 'DOES_NOT_MATCH_PATTERN', value)] :\r\n                [];\r\n\r\n        return toValidationResult({ result, messages, value });\r\n    },\r\n\r\n    /**\r\n     * Un-curried version of `regexValidator`.\r\n     * @function module:regexValidator.regexValidator$\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    regexValidator$ = (options, value) => regexValidatorNoNormalize$(toRegexValidatorOptions(options), value),\r\n\r\n    /**\r\n     * Validates a value with the regex `pattern` option passed in.\r\n     * @curried\r\n     * @function module:regexValidator.regexValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    regexValidator = curry(regexValidator$)\r\n\r\n;\r\n\r\nexport default regexValidator;\r\n","/**\r\n * Created by Ely on 1/21/2015.\r\n * Module for validating alpha-numeric values.\r\n * @module alnumValidator\r\n */\r\nimport {regexValidator} from './regexValidator';\r\nimport {curry, assignDeep} from 'fjl';\r\n\r\n/**\r\n * @function module:alnumValidator.alnumValidator\r\n * @param options {Object}\r\n * @param value {*}\r\n * @returns {Object}\r\n */\r\nexport const\r\n\r\n    /**\r\n     * @function module:alnumValidator.alnumValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    alnumValidator = curry((options, value) =>\r\n        regexValidator(assignDeep({\r\n            pattern: /^[\\da-z]+$/i,\r\n            messageTemplates: {\r\n                DOES_NOT_MATCH_PATTERN: x =>\r\n                    `Value is not alpha-numeric.  Value received: '${x}'.`\r\n            }\r\n        }, options), value)\r\n    ),\r\n\r\n    /**\r\n     * Same as `alnumValidator` though doesn't-require-`options`/ignores parameter.\r\n     * @function module:alnumValidator.alnumValidator1\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    alnumValidator1 = value => alnumValidator(null, value)\r\n\r\n;\r\n\r\nexport default alnumValidator;\r\n","/**\r\n * Created by Ely on 1/21/2015.\r\n * Module for validating digits.\r\n * @module digitValidator\r\n */\r\nimport {regexValidator} from './regexValidator';\r\nimport {curry, assignDeep} from 'fjl';\r\n\r\nexport const\r\n\r\n    /**\r\n     * @function module:digitValidator.digitValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    digitValidator = curry((options, value) => regexValidator(assignDeep({\r\n        pattern: /^\\d+$/,\r\n        messageTemplates: {\r\n            DOES_NOT_MATCH_PATTERN: x =>\r\n                `The value passed in contains non digital characters.  ` +\r\n                `Value received: \"${x}\".`\r\n        }\r\n    }, options), value)),\r\n\r\n    /**\r\n     * Same as `digitValidator` though doesn't-require/ignores `options` parameter.\r\n     * @function module:digitValidator.digitValidator1\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    digitValidator1 = value => digitValidator(null, value);\r\n\r\nexport default digitValidator;\r\n","/**\r\n * Created by Ely on 1/21/2015.\r\n * @module lengthValidator\r\n */\r\nimport {toValidationResult, getErrorMsgByKey, toValidationOptions, isOneOf} from './ValidationUtils';\r\nimport {typeOf, assignDeep, curry} from 'fjl';\r\nimport {defineEnumProps$} from 'fjl-mutable';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Normalizes `lengthValidator` options.\r\n     * @function module:lengthValidator.toLengthOptions\r\n     * @param options {Object}\r\n     * @returns {Object}\r\n     */\r\n    toLengthOptions = options => {\r\n        const _options = defineEnumProps$([\r\n            [Number, 'min', 0],\r\n            [Number, 'max', Number.MAX_SAFE_INTEGER]\r\n        ], toValidationOptions());\r\n        _options.messageTemplates = {\r\n            NOT_OF_TYPE: value => `Value does not have a \\`length\\` property.  ` +\r\n                `Type received: \\`${typeOf(value)}\\`.  ` +\r\n                `Value received: \\`${value}\\`.`,\r\n            NOT_WITHIN_RANGE: (value, ops) => `Value's length is not within range ` +\r\n                `${ops.min} to ${ops.max}.  ` +\r\n                `Evaluated length is \\`${value.length}\\`.  ` +\r\n                `Value received: \\`${value}\\`.`\r\n        };\r\n        return options ? assignDeep(_options, options) : _options;\r\n    },\r\n\r\n    /**\r\n     * Validates whether given value has a length and whether length is between\r\n     *  given range (@see options for range props).\r\n     * @function module:lengthValidator.lengthValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    lengthValidator = curry((options, value) => {\r\n        const ops = toLengthOptions(options),\r\n            messages = []\r\n        ;\r\n        let valLength,\r\n            isWithinRange,\r\n            result = false\r\n        ;\r\n        if (isOneOf(value, 'Null', 'Undefined', 'NaN', 'Symbol') || !value.hasOwnProperty('length')) {\r\n            messages.push(getErrorMsgByKey(ops, 'NOT_OF_TYPE', value));\r\n            return toValidationResult({result, messages, value});\r\n        }\r\n        valLength = value.length;\r\n        isWithinRange = valLength >= ops.min && valLength <= ops.max;\r\n        if (!isWithinRange) {\r\n            messages.push(getErrorMsgByKey(ops, 'NOT_WITHIN_RANGE', value));\r\n        }\r\n        else {\r\n            result = true;\r\n        }\r\n        return toValidationResult({\r\n            result,\r\n            messages,\r\n            value\r\n        });\r\n    })\r\n;\r\n\r\nexport default lengthValidator;\r\n","/**\r\n * Created by Ely on 7/21/2014.\r\n * @module notEmptyValidator\r\n */\r\nimport {toValidationResult, toValidationOptions, getErrorMsgByKey} from './ValidationUtils';\r\nimport {isEmpty, curry} from 'fjl';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Normalizes incoming options so that they are valid `notEmptyValidator` options.\r\n     * @note currently `notEmptyValidator` only takes the `messageTemplates` option (may\r\n     *  have more options in the future).\r\n     * @function module:notEmptyValidator.toNotEmptyOptions\r\n     * @param options {Object}\r\n     * @returns {Object}\r\n     */\r\n    toNotEmptyOptions = options =>\r\n        toValidationOptions({\r\n            messageTemplates: {\r\n                EMPTY_NOT_ALLOWED: () =>\r\n                    'Empty values are not allowed.'\r\n            }\r\n        }, options),\r\n\r\n    /**\r\n     * Un-curried version of notEmptyValidator which doesn't normalize the passed in\r\n     * options parameter (since currently `notEmptyValidator` has no options other than it's `messageTemplates`\r\n     * field).  @see module:notEmptyValidator.notEmptyValidatorNoNormalize$ .\r\n     * Also this method is useful when the user, themselves, have to call `toNotEmptyOptions` for a specific reason.\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {*}\r\n     */\r\n    notEmptyValidatorNoNormalize$ = (options, value) => {\r\n        const result = isEmpty(value),\r\n            // If test failed\r\n            messages = result ? [getErrorMsgByKey(\r\n                options, 'EMPTY_NOT_ALLOWED', value\r\n            )] : [];\r\n        return toValidationResult({result: !result, messages, value});\r\n    },\r\n\r\n    /**\r\n     * Un-curried version of `notEmptyValidator`\r\n     * @function module:notEmptyValidator.notEmptyValidator$\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    notEmptyValidator$ = (options, value) =>\r\n        notEmptyValidatorNoNormalize$(toNotEmptyOptions(options), value),\r\n\r\n    /**\r\n     * Same as `notEmptyValidator` except doesn't require first parameter (\"options\" parameter).\r\n     * @function module:notEmptyValidator.notEmptyValidator1\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    notEmptyValidator1 = value => notEmptyValidatorNoNormalize$(null, value),\r\n\r\n    /**\r\n     * @function module:notEmptyValidator.notEmptyValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    notEmptyValidator = curry(notEmptyValidator$);\r\n\r\nexport default notEmptyValidator;\r\n","/**\r\n * Created by Ely on 1/21/2015.\r\n * @module stringLengthValidator\r\n */\r\nimport {toValidationResult, getErrorMsgByKey, toValidationOptions} from './ValidationUtils';\r\nimport {typeOf, isString, assignDeep, curry} from 'fjl';\r\nimport {defineEnumProps$} from 'fjl-mutable';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Normalizes (ensures has expected properties) `stringLengthValidator`'s options.\r\n     * @function module:stringLengthValidator.toStringLengthOptions\r\n     * @param options {Object}\r\n     * @returns {Object}\r\n     */\r\n    toStringLengthOptions = options => {\r\n        const _options = defineEnumProps$([\r\n            [Number, 'min', 0],\r\n            [Number, 'max', Number.MAX_SAFE_INTEGER]\r\n        ], toValidationOptions());\r\n\r\n        _options.messageTemplates = {\r\n            NOT_OF_TYPE: (value) => `Value is not a String.  ` +\r\n                `Value type received: ${typeOf(value)}.  ` +\r\n                `Value received: \"${value}\".`,\r\n            NOT_WITHIN_RANGE: (value, ops) => `Value is not within range ` +\r\n                `${ops.min} to ${ops.max}.  ` +\r\n                `Value length given: \"` + value.length + `\".  ` +\r\n                `Value received: \"` + value + `\".`\r\n        };\r\n\r\n        return options ? assignDeep(_options, options) : _options;\r\n    },\r\n\r\n    /**\r\n     * Same as `stringLengthValidator$` except doesn't normalize the incoming options.\r\n     * Useful for cases where you have to call `toStringLengthValidator` options from outside of the `stringLengthValidator` call (\r\n     *  helps eliminate one call in this case).  Also useful for extreme cases (cases where you have hundreds of validators\r\n     *  and want to pull out every ounce of performance from them possible).\r\n     * @function module:stringLengthValidator.stringLengthValidatorNoNormalize$\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    stringLengthValidatorNoNormalize$ = (options, value) => {\r\n        const messages = [],\r\n            isOfType = isString(value),\r\n            valLength = isOfType ? value.length : 0,\r\n            isWithinRange = valLength >= options.min && valLength <= options.max;\r\n        if (!isOfType) {\r\n            messages.push(getErrorMsgByKey(options, 'NOT_OF_TYPE', value));\r\n        }\r\n        else if (!isWithinRange) {\r\n            messages.push(getErrorMsgByKey(options, 'NOT_WITHIN_RANGE', value));\r\n        }\r\n        return toValidationResult({\r\n            result: isOfType && isWithinRange,\r\n            messages,\r\n            value\r\n        });\r\n    },\r\n\r\n    /**\r\n     * @function module:stringLengthValidator.stringLengthValidator$\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    stringLengthValidator$ = (options, value) =>\r\n        stringLengthValidatorNoNormalize$(toStringLengthOptions(options), value),\r\n\r\n    /**\r\n     * @function module:stringLengthValidator.stringLengthValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    stringLengthValidator = curry(stringLengthValidator$)\r\n\r\n;\r\n\r\nexport default stringLengthValidator;\r\n","/**\r\n * @module fjlValidator\r\n */\r\nexport * from './alnumValidator';\r\nexport * from './digitValidator';\r\nexport * from './lengthValidator';\r\nexport * from './notEmptyValidator';\r\nexport * from './regexValidator';\r\nexport * from './stringLengthValidator';\r\nexport * from './ValidationUtils';\r\n"],"names":["defaultValueObscurator","x","repeat","length","getErrorMsgByKey","curry","options","key","value","message","messageTemplates","valueObscured","valueObscurator","_value","isFunction","call","isString","toValidationOptions","assignDeep","defineEnumProps$","Object","Boolean","Function","toValidationResult","Array","undefined","isOneOf","types","typeName","typeOf","map","toTypeRefName","some","name","toRegexValidatorOptions","_options","defineEnumProp$","RegExp","DOES_NOT_MATCH_PATTERN","ops","pattern","regexValidatorNoNormalize$","result","test","messages","regexValidator$","regexValidator","alnumValidator","alnumValidator1","digitValidator","digitValidator1","toLengthOptions","Number","MAX_SAFE_INTEGER","NOT_OF_TYPE","NOT_WITHIN_RANGE","min","max","lengthValidator","valLength","isWithinRange","hasOwnProperty","push","toNotEmptyOptions","EMPTY_NOT_ALLOWED","notEmptyValidatorNoNormalize$","isEmpty","notEmptyValidator$","notEmptyValidator1","notEmptyValidator","toStringLengthOptions","stringLengthValidatorNoNormalize$","isOfType","stringLengthValidator$","stringLengthValidator"],"mappings":"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"}