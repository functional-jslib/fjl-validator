{"version":3,"file":"fjl-validator.js","sources":["../../src/ValidationUtils.js","../../src/regexValidator.js","../../src/alnumValidator.js","../../src/digitValidator.js","../../src/lengthValidator.js","../../src/notEmptyValidator.js","../../src/stringLengthValidator.js"],"sourcesContent":["/**\r\n * Created by Ely on 7/21/2014.\r\n * Initial idea borrowed from Zend Framework 2's Zend/Validator\r\n * @module ValidationUtils\r\n */\r\nimport {assignDeep, call, isFunction, isString, repeat,\r\n    curry, toTypeRefName, typeOf, defineEnumProps} from 'fjl';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Default value obscurator.\r\n     * @function module:ValidationUtils.defaultValueObscurator\r\n     * @param x {*} - Value to obscurate.\r\n     * @returns {String} - Obscurated value.\r\n     */\r\n    defaultValueObscurator = x => repeat((x + '').length, '*'),\r\n\r\n    /**\r\n     * Gets an error message by `messageTemplates` key from `options` object.\r\n     * @function module:ValidationUtils.getErrorMsgByKey\r\n     * @param options {Object}\r\n     * @param key {(String|Function)}\r\n     * @param value {*}\r\n     * @returns {String|undefined} - Error message if successfully resolved one else `undefined`.\r\n     * @curried\r\n     */\r\n    getErrorMsgByKey = curry((options, key, value) => {\r\n        let message;\r\n        const {messageTemplates, valueObscured, valueObscurator} = options,\r\n            _value = valueObscured ? valueObscurator(value) : value;\r\n        if (isFunction(key)) {\r\n            message = call(key, _value, options);\r\n        }\r\n        else if (!isString(key) || !messageTemplates || !messageTemplates[key]) {\r\n            return;\r\n        }\r\n        else if (isFunction(messageTemplates[key])) {\r\n            message = call(messageTemplates[key], _value, options);\r\n        }\r\n        else {\r\n            message = messageTemplates[key];\r\n        }\r\n        return message;\r\n    }),\r\n\r\n    /**\r\n     * Returns a strongly typed/normalized ValidatorOptions object.\r\n     * @function module:ValidationUtils.toValidationOptions\r\n     * @param options {...Object}\r\n     * @returns {Object}\r\n     */\r\n    toValidationOptions = (...options) =>\r\n        assignDeep(defineEnumProps([\r\n            [Object, 'messageTemplates', {}],\r\n            [Boolean, 'valueObscured', false],\r\n            [Function, 'valueObscurator', defaultValueObscurator]\r\n        ], {}), ...(options.length ? options : [{}])),\r\n\r\n    /**\r\n     * Returns a strongly typed, normalized validation result object.\r\n     * @function module:ValidationUtils.toValidationResult\r\n     * @param options {...Object}\r\n     * @returns {*}\r\n     */\r\n    toValidationResult = (...options) =>\r\n        assignDeep(defineEnumProps([\r\n                [Boolean, 'result', false],\r\n                [Array, 'messages', []]\r\n            ], {}),\r\n            {value: undefined},\r\n            ...(options.length ? options : [{}])\r\n        ),\r\n\r\n    isOneOf = (x, ...types) => {\r\n        const typeName = typeOf(x);\r\n        return types\r\n            .map(toTypeRefName)\r\n            .some(name => typeName === name);\r\n    }\r\n\r\n;\r\n\r\nexport default toValidationResult;\r\n","/**\r\n * Created by Ely on 7/21/2014.\r\n * Module for validating a value by regular expression.\r\n * @module regexValidator\r\n */\r\nimport {toValidationResult, toValidationOptions, getErrorMsgByKey}\r\n    from './ValidationUtils';\r\nimport {curry, assignDeep, defineEnumProp} from 'fjl';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Normalizes `regexValidator` options.\r\n     * @function module:regexValidator.toRegexValidatorOptions\r\n     * @param options {Object}\r\n     * @returns {Object}\r\n     */\r\n    toRegexValidatorOptions = options => {\r\n        const [_options] = defineEnumProp(RegExp, toValidationOptions(), 'pattern', /./);\r\n        _options.messageTemplates = {\r\n            DOES_NOT_MATCH_PATTERN: (value, ops) =>\r\n                'The value passed in does not match pattern\"'\r\n                + ops.pattern + '\".  Value passed in: \"'\r\n                + value + '\".'\r\n        };\r\n        return options ? assignDeep(_options, options) : _options;\r\n    },\r\n\r\n    /**\r\n     * Same as `regexValidator` except this version is not curried and doesn't normalize incoming `options` parameter.\r\n     * @note Useful when the user has a need for calling `toRegexValidatorOptions`\r\n     *  externally/from-outside-the-`regexValidator` call (helps to remove that one extra call in this case (since\r\n     *  `regexValidator` calls `toRegexValidatorOptions` internally)).\r\n     * @function module:regexValidator.regexValidatorNoNormalize\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {*}\r\n     */\r\n    regexValidatorNoNormalize = curry((options, value) => {\r\n        const result = options.pattern.test(value),\r\n\r\n            // If test failed\r\n            messages = !result ?\r\n                [getErrorMsgByKey(options, 'DOES_NOT_MATCH_PATTERN', value)] :\r\n                [];\r\n\r\n        return toValidationResult({ result, messages, value });\r\n    }),\r\n\r\n    /**\r\n     * Validates a value with the regex `pattern` option passed in.\r\n     * @function module:regexValidator.regexValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    regexValidator = curry((options, value) => regexValidatorNoNormalize(toRegexValidatorOptions(options), value))\r\n\r\n;\r\n\r\nexport default regexValidator;\r\n","/**\r\n * Created by Ely on 1/21/2015.\r\n * Module for validating alpha-numeric values.\r\n * @module alnumValidator\r\n */\r\nimport {regexValidator} from './regexValidator';\r\nimport {curry, assignDeep} from 'fjl';\r\n\r\nexport const\r\n\r\n    /**\r\n     * @function module:alnumValidator.alnumValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    alnumValidator = curry((options, value) =>\r\n        regexValidator(assignDeep({\r\n            pattern: /^[\\da-z]+$/i,\r\n            messageTemplates: {\r\n                DOES_NOT_MATCH_PATTERN: x =>\r\n                    `Value is not alpha-numeric.  Value received: '${x}'.`\r\n            }\r\n        }, options), value)\r\n    ),\r\n\r\n    /**\r\n     * Same as `alnumValidator` though doesn't-require-`options`/ignores parameter.\r\n     * @function module:alnumValidator.alnumValidator1\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    alnumValidator1 = value => alnumValidator(null, value)\r\n\r\n;\r\n\r\nexport default alnumValidator;\r\n","/**\r\n * Created by Ely on 1/21/2015.\r\n * Module for validating digits.\r\n * @module digitValidator\r\n */\r\nimport {regexValidator} from './regexValidator';\r\nimport {curry, assignDeep} from 'fjl';\r\n\r\nexport const\r\n\r\n    /**\r\n     * @function module:digitValidator.digitValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    digitValidator = curry((options, value) => regexValidator(assignDeep({\r\n        pattern: /^\\d+$/,\r\n        messageTemplates: {\r\n            DOES_NOT_MATCH_PATTERN: x =>\r\n                `The value passed in contains non digital characters.  ` +\r\n                `Value received: \"${x}\".`\r\n        }\r\n    }, options), value)),\r\n\r\n    /**\r\n     * Same as `digitValidator` though doesn't-require/ignores `options` parameter.\r\n     * @function module:digitValidator.digitValidator1\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    digitValidator1 = value => digitValidator(null, value);\r\n\r\nexport default digitValidator;\r\n","/**\r\n * Created by Ely on 1/21/2015.\r\n * @module lengthValidator\r\n * @todo Allow validator option generators to receive `zero` object (object on which to extend on).\r\n * @todo Allow validator option generators to receive more than one options object.\r\n */\r\nimport {toValidationResult, getErrorMsgByKey, toValidationOptions, isOneOf} from './ValidationUtils';\r\nimport {typeOf, assignDeep, curry, defineEnumProps} from 'fjl';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Normalizes `lengthValidator` options.\r\n     * @function module:lengthValidator.toLengthOptions\r\n     * @param options {Object}\r\n     * @returns {Object}\r\n     */\r\n    toLengthOptions = options => {\r\n        const _options = defineEnumProps([\r\n            [Number, 'min', 0],\r\n            [Number, 'max', Number.MAX_SAFE_INTEGER]\r\n        ], toValidationOptions());\r\n        _options.messageTemplates = {\r\n            NOT_OF_TYPE: value => `Value does not have a \\`length\\` property.  ` +\r\n                `Type received: \\`${typeOf(value)}\\`.  ` +\r\n                `Value received: \\`${value}\\`.`,\r\n            NOT_WITHIN_RANGE: (value, ops) => `Value's length is not within range ` +\r\n                `${ops.min} to ${ops.max}.  ` +\r\n                `Evaluated length is \\`${value.length}\\`.  ` +\r\n                `Value received: \\`${value}\\`.`\r\n        };\r\n        return options ? assignDeep(_options, options) : _options;\r\n    },\r\n\r\n    /**\r\n     * Validates whether given value has a length and whether length is between\r\n     *  given range (if given) but doesn't normalize options.\r\n     *  (@see `toLengthOptions` for range props).\r\n     * @function module:lengthValidator.lengthValidatorNoNormalize\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    lengthValidatorNoNormalize = curry((options, value) => {\r\n        const messages = [];\r\n        let valLength,\r\n            isWithinRange,\r\n            result = false\r\n        ;\r\n        if (isOneOf(value, 'Null', 'Undefined', 'NaN', 'Symbol') || !value.hasOwnProperty('length')) {\r\n            messages.push(getErrorMsgByKey(options, 'NOT_OF_TYPE', value));\r\n            return toValidationResult({result, messages, value});\r\n        }\r\n        valLength = value.length;\r\n        isWithinRange = valLength >= options.min && valLength <= options.max;\r\n        if (!isWithinRange) {\r\n            messages.push(getErrorMsgByKey(options, 'NOT_WITHIN_RANGE', value));\r\n        }\r\n        else {\r\n            result = true;\r\n        }\r\n        return toValidationResult({\r\n            result,\r\n            messages,\r\n            value\r\n        });\r\n    }),\r\n\r\n    /**\r\n     * Validates whether given value has a length and whether length is between\r\n     *  given range (if given).  Same as `lengthValidatorNoNormalize` except normalizes incoming options.\r\n     *  (@see `toLengthOptions` for more on options).\r\n     * @function module:lengthValidator.lengthValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    lengthValidator = curry((options, value) => {\r\n        return lengthValidatorNoNormalize(toLengthOptions(options), value);\r\n    })\r\n;\r\n\r\nexport default lengthValidator;\r\n","/**\r\n * Created by Ely on 7/21/2014.\r\n * @module notEmptyValidator\r\n */\r\nimport {toValidationResult, toValidationOptions, getErrorMsgByKey} from './ValidationUtils';\r\nimport {isEmpty, curry} from 'fjl';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Normalizes incoming options so that they are valid `notEmptyValidator` options.\r\n     * @note currently `notEmptyValidator` only takes the `messageTemplates` option (may\r\n     *  have more options in the future).\r\n     * @function module:notEmptyValidator.toNotEmptyOptions\r\n     * @param options {Object}\r\n     * @returns {Object}\r\n     */\r\n    toNotEmptyOptions = options =>\r\n        toValidationOptions({\r\n            messageTemplates: {\r\n                EMPTY_NOT_ALLOWED: () =>\r\n                    'Empty values are not allowed.'\r\n            }\r\n        }, options),\r\n\r\n    /**\r\n     * Validates whether incoming `value` is empty* or not also doesn't normalize the passed in\r\n     * options parameter (since currently `notEmptyValidator` has no options other than it's `messageTemplates`\r\n     * field). * 'empty' in our context means one of `null`, `undefined`, empty lists (strings/arrays) (`x.length === 0`), `false`, empty object (obj with `0` enumerable props), and empty collection/iterable object (`Map`, `Set` etc.), NaN,\r\n     * Also this method is useful when the user, themselves, have to call `toNotEmptyOptions` for a specific reason.\r\n     * @function module:notEmptyValidator.notEmptyValidatorNoNormalize\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {*}\r\n     */\r\n    notEmptyValidatorNoNormalize = curry((options, value) => {\r\n        const result = isEmpty(value),\r\n            // If test failed\r\n            messages = result ? [getErrorMsgByKey(\r\n                options, 'EMPTY_NOT_ALLOWED', value\r\n            )] : [];\r\n        return toValidationResult({result: !result, messages, value});\r\n    }),\r\n\r\n    /**\r\n     * Returns a validation result indicating whether give `value`\r\n     * is an empty* value or not (*@see `notEmptyValidatorNoNormalize` for more about\r\n     * empties).\r\n     * @function module:notEmptyValidator.notEmptyValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    notEmptyValidator = curry((options, value) =>\r\n        notEmptyValidatorNoNormalize(toNotEmptyOptions(options), value)),\r\n\r\n    /**\r\n     * Same as `notEmptyValidator` except doesn't require first parameter (\"options\" parameter). (*@see `notEmptyValidatorNoNormalize` for more about\r\n     * empties).\r\n     * @function module:notEmptyValidator.notEmptyValidator1\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    notEmptyValidator1 = value => notEmptyValidatorNoNormalize(null, value)\r\n\r\n;\r\n\r\nexport default notEmptyValidator;\r\n","/**\r\n * Created by Ely on 1/21/2015.\r\n * @module stringLengthValidator\r\n */\r\nimport {toValidationResult, getErrorMsgByKey} from './ValidationUtils';\r\nimport {typeOf, isString, assignDeep, curry} from 'fjl';\r\nimport {toLengthOptions} from \"./lengthValidator\";\r\n\r\nexport const\r\n\r\n    /**\r\n     * Normalizes (ensures has expected properties) `stringLengthValidator`'s options.\r\n     * @function module:stringLengthValidator.toStringLengthOptions\r\n     * @param options {Object}\r\n     * @returns {Object}\r\n     */\r\n    toStringLengthOptions = options => {\r\n        const _options = {\r\n            messageTemplates: {\r\n                NOT_OF_TYPE: (value) => `Value is not a String.  ` +\r\n                    `Value type received: ${typeOf(value)}.  ` +\r\n                    `Value received: \"${value}\".`\r\n            }\r\n        };\r\n        return toLengthOptions(\r\n            options ? assignDeep(_options, options) : _options\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Same as `stringLengthValidator` except doesn't normalize the incoming options.\r\n     * Useful for cases where you have to call `toStringLengthValidator` options from outside of the `stringLengthValidator` call (\r\n     *  helps eliminate one call in this case).  Also useful for extreme cases (cases where you have hundreds of validators\r\n     *  and want to pull out every ounce of performance from them possible).\r\n     * @function module:stringLengthValidator.stringLengthValidatorNoNormalize\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    stringLengthValidatorNoNormalize = curry((options, value) => {\r\n        const messages = [],\r\n            isOfType = isString(value),\r\n            valLength = isOfType ? value.length : 0,\r\n            isWithinRange = valLength >= options.min && valLength <= options.max;\r\n        if (!isOfType) {\r\n            messages.push(getErrorMsgByKey(options, 'NOT_OF_TYPE', value));\r\n        }\r\n        else if (!isWithinRange) {\r\n            messages.push(getErrorMsgByKey(options, 'NOT_WITHIN_RANGE', value));\r\n        }\r\n        return toValidationResult({\r\n            result: isOfType && isWithinRange,\r\n            messages,\r\n            value\r\n        });\r\n    }),\r\n\r\n    /**\r\n     * @function module:stringLengthValidator.stringLengthValidator\r\n     * @param options {Object}\r\n     * @param value {*}\r\n     * @returns {Object}\r\n     */\r\n    stringLengthValidator = curry((options, value) =>\r\n        stringLengthValidatorNoNormalize(toStringLengthOptions(options), value))\r\n\r\n;\r\n\r\nexport default stringLengthValidator;\r\n"],"names":["defaultValueObscurator","x","repeat","length","getErrorMsgByKey","curry","options","key","value","message","messageTemplates","valueObscured","valueObscurator","_value","isFunction","call","isString","toValidationOptions","assignDeep","defineEnumProps","Object","Boolean","Function","toValidationResult","Array","undefined","isOneOf","types","typeName","typeOf","map","toTypeRefName","some","name","toRegexValidatorOptions","_options","defineEnumProp","RegExp","DOES_NOT_MATCH_PATTERN","ops","pattern","regexValidatorNoNormalize","result","test","messages","regexValidator","alnumValidator","alnumValidator1","digitValidator","digitValidator1","toLengthOptions","Number","MAX_SAFE_INTEGER","NOT_OF_TYPE","NOT_WITHIN_RANGE","min","max","lengthValidatorNoNormalize","valLength","isWithinRange","hasOwnProperty","push","lengthValidator","toNotEmptyOptions","EMPTY_NOT_ALLOWED","notEmptyValidatorNoNormalize","isEmpty","notEmptyValidator","notEmptyValidator1","toStringLengthOptions","stringLengthValidatorNoNormalize","isOfType","stringLengthValidator"],"mappings":"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"}